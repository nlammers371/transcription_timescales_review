% script to simulate burst time series with parameters from numerical and
% analytic results
clear
close all
addpath('utilities')

% load numeric results
n_bcd_sites = 6;
project = ['n' num2str(n_bcd_sites)];
addpath('utilities')

% set paths
FigurePath = ['../fig/emergent_bursting/' project '/'];
mkdir(FigurePath)
DataPath = ['../out/emergent_bursting/' project '/'];

% load data
load([DataPath 'bursting_sim_struct.mat'])
load([DataPath 'bursting_chain_calc_struct.mat'])
coop_index = 2;
% cooperativity energy
ec_vec = bursting_chain_calc_struct(coop_index).coopEnergies;
omega_vec = exp(-ec_vec);
ec_filter = ec_vec <=0; % select for only synergistic interactions

% calculate amount of time neaded to go from 6 to 4 as a function of
% cooperativity strength
Q_coop_on_array = bursting_chain_calc_struct(coop_index).Q;

% initialize arrays 
eff_64_coop_vec = NaN(1,size(Q_coop_on_array,3));
calc_vec = [4 6];

for eb = 1:length(activatorEnergyVec)     
  [~, eff_64_coop_vec(eb)] = pt_solve(Q_coop_on_array(:,:,eb),calc_vec(1),calc_vec(2)); 
end


%%


ss6_fig = figure;
hold on
cmap = brewermap(14,'Blues');
color_ind = [101 81 31 11 31 81 101];

plot(omega_vec(ec_filter),sum(master_struct(n_index).bursting_chain_calc_struct(coop_index)....
  .SS([1 7],ec_filter)),'-','Color',cmap(end,:),'LineWidth',2.5)
plot(omega_vec(ec_filter),sum(master_struct(n_index).bursting_chain_calc_struct(coop_index)....
  .SS(2:6,ec_filter)),'-','Color',cmap(3,:),'LineWidth',2.5)
 
ylabel('state probability')
% ylim(ylimTrace)
xlim([1 7])
xlabel('cooperativity strength (\omega)')
legend('end states (0,6)', 'intermediate states (1-5)','Location','southwest')
box on
set(gca,'Fontsize',14)

ax = gca;
ax.YColor = 'black';
ax.XColor = 'black';
ax.Color = pboc;
% StandardFigurePBoC(p,gca);
ss6_fig.InvertHardcopy = 'off';
saveas(ss6_fig,[FigurePath 'ss6_vs_omega.png'])
saveas(ss6_fig,[FigurePath 'ss6_vs_omega.pdf'])